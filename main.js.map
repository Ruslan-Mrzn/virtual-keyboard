{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAiBA;AAiBA;AAkBA;AAkBA;AAgBA;AAgBA;AAgBA;AAgBA;AAWA;AAWA;AA6BA;AAwBA;AAwBA;;;;;;;;;;;;;;;;ACzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://virtual-keyboard/./src/utils/constants.js","webpack://virtual-keyboard/./src/utils/utils.js","webpack://virtual-keyboard/./src/sass/styles.scss?5cbc","webpack://virtual-keyboard/webpack/bootstrap","webpack://virtual-keyboard/webpack/runtime/define property getters","webpack://virtual-keyboard/webpack/runtime/hasOwnProperty shorthand","webpack://virtual-keyboard/webpack/runtime/make namespace object","webpack://virtual-keyboard/./src/index.js"],"sourcesContent":["const firstRowKeysCodes = [\n  'Backquote',\n  'Digit1',\n  'Digit2',\n  'Digit3',\n  'Digit4',\n  'Digit5',\n  'Digit6',\n  'Digit7',\n  'Digit8',\n  'Digit9',\n  'Digit0',\n  'Minus',\n  'Equal',\n  'Backspace',\n];\n\nconst firstRowKeys = [\n  '`',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '0',\n  '-',\n  '=',\n  'Backspace',\n];\n\nconst secondRowKeysCodes = [\n  'Tab',\n  'KeyQ',\n  'KeyW',\n  'KeyE',\n  'KeyR',\n  'KeyT',\n  'KeyY',\n  'KeyU',\n  'KeyI',\n  'KeyO',\n  'KeyP',\n  'BracketLeft',\n  'BracketRight',\n  'Backslash',\n  'Delete',\n];\n\nconst secondRowKeys = [\n  'Tab',\n  'q',\n  'w',\n  'e',\n  'r',\n  't',\n  'y',\n  'u',\n  'i',\n  'o',\n  'p',\n  '[',\n  ']',\n  '\\\\',\n  'Delete',\n];\n\nconst thirdRowKeysCodes = [\n  'CapsLock',\n  'KeyA',\n  'KeyS',\n  'KeyD',\n  'KeyF',\n  'KeyG',\n  'KeyH',\n  'KeyJ',\n  'KeyK',\n  'KeyL',\n  'Semicolon',\n  'Quote',\n  'Enter',\n];\n\nconst thirdRowKeys = [\n  'CapsLock',\n  'a',\n  's',\n  'd',\n  'f',\n  'g',\n  'h',\n  'j',\n  'k',\n  'l',\n  ';',\n  \"'\",\n  'Enter',\n];\n\nconst fourthRowKeysCodes = [\n  'ShiftLeft',\n  'KeyZ',\n  'KeyX',\n  'KeyC',\n  'KeyV',\n  'KeyB',\n  'KeyN',\n  'KeyM',\n  'Comma',\n  'Period',\n  'Slash',\n  'ArrowUp',\n  'ShiftRight',\n];\n\nconst fourthRowKeys = [\n  'Shift',\n  'z',\n  'x',\n  'c',\n  'v',\n  'b',\n  'n',\n  'm',\n  ',',\n  '.',\n  '/',\n  'ArrowUp',\n  'Shift',\n];\n\nconst fifthRowKeysCodes = [\n  'ControlLeft',\n  'AltLeft',\n  'Space',\n  'AltRight',\n  'ArrowLeft',\n  'ArrowDown',\n  'ArrowRight',\n  'ControlRight',\n];\n\nconst fifthRowKeys = [\n  'Control',\n  'Alt',\n  ' ',\n  'Alt',\n  'ArrowLeft',\n  'ArrowDown',\n  'ArrowRight',\n  'Control',\n];\n\nconst capsModeKeys = [\n  'KeyQ',\n  'KeyW',\n  'KeyE',\n  'KeyR',\n  'KeyT',\n  'KeyY',\n  'KeyU',\n  'KeyI',\n  'KeyO',\n  'KeyP',\n  'KeyA',\n  'KeyS',\n  'KeyD',\n  'KeyF',\n  'KeyG',\n  'KeyH',\n  'KeyJ',\n  'KeyK',\n  'KeyL',\n  'KeyZ',\n  'KeyX',\n  'KeyC',\n  'KeyV',\n  'KeyB',\n  'KeyN',\n  'KeyM',\n];\n\nconst shiftModeKeys = [\n  'Backquote',\n  'Digit1',\n  'Digit2',\n  'Digit3',\n  'Digit4',\n  'Digit5',\n  'Digit6',\n  'Digit7',\n  'Digit8',\n  'Digit9',\n  'Digit0',\n  'Minus',\n  'Equal',\n  'BracketLeft',\n  'BracketRight',\n  'Backslash',\n  'Semicolon',\n  'Quote',\n  'Comma',\n  'Period',\n  'Slash',\n];\n\nconst shiftModeKeysActiveValues = [\n  '~',\n  '!',\n  '@',\n  '#',\n  '$',\n  '%',\n  '^',\n  '&',\n  '*',\n  '(',\n  ')',\n  '_',\n  '+',\n  '{',\n  '}',\n  '|',\n  ':',\n  '\"',\n  '<',\n  '>',\n  '?',\n];\n\nconst shiftModeKeysInactiveValues = [\n  '`',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '0',\n  '-',\n  '=',\n  '[',\n  ']',\n  '\\\\',\n  ';',\n  \"'\",\n  ',',\n  '.',\n  '/',\n];\n\nexport {\n  firstRowKeys,\n  firstRowKeysCodes,\n  secondRowKeysCodes,\n  secondRowKeys,\n  thirdRowKeysCodes,\n  thirdRowKeys,\n  fourthRowKeysCodes,\n  fourthRowKeys,\n  fifthRowKeysCodes,\n  fifthRowKeys,\n  capsModeKeys,\n  shiftModeKeys,\n  shiftModeKeysActiveValues,\n  shiftModeKeysInactiveValues,\n};\n","const renderKeyboardKey = (key, rowKeys, rowKeysCodes, keyboardSettings, capsModeKeys) => {\n  const keyboardKey = document.createElement('button');\n  keyboardKey.classList.add('keyboard-key');\n  if (key === 'Backspace' || key === 'Tab' || key === 'CapsLock' || key === 'Enter' || key === 'Shift' || key === ' ') keyboardKey.classList.add('flex-grow');\n  if (key === 'CapsLock' && keyboardSettings.capsMode) keyboardKey.classList.add('power-on');\n  keyboardKey.dataset.key = rowKeysCodes[rowKeys.indexOf(key)];\n  keyboardKey.textContent = key;\n  if (key === 'ArrowUp') keyboardKey.textContent = '↑';\n  if (key === 'ArrowLeft') keyboardKey.textContent = '←';\n  if (key === 'ArrowDown') keyboardKey.textContent = '↓';\n  if (key === 'ArrowRight') keyboardKey.textContent = '→';\n  if (capsModeKeys.some((keyCode) => rowKeysCodes[rowKeys.indexOf(key)] === keyCode)\n    && keyboardSettings.capsMode) keyboardKey.textContent = key.toUpperCase();\n  rowKeys.splice(rowKeys.indexOf(key), 1, '');\n  return keyboardKey;\n};\n\nconst createKeyboardRow = () => {\n  const row = document.createElement('div');\n  row.classList.add('keyboard-row');\n  return row;\n};\n\nexport {\n  renderKeyboardKey,\n  createKeyboardRow,\n};\n","// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './sass/styles.scss';\nimport { createKeyboardRow, renderKeyboardKey } from './utils/utils';\nimport {\n  firstRowKeys,\n  firstRowKeysCodes,\n  secondRowKeysCodes,\n  secondRowKeys,\n  thirdRowKeysCodes,\n  thirdRowKeys,\n  fourthRowKeysCodes,\n  fourthRowKeys,\n  fifthRowKeysCodes,\n  fifthRowKeys,\n  capsModeKeys,\n  shiftModeKeys,\n  shiftModeKeysActiveValues,\n  shiftModeKeysInactiveValues,\n} from './utils/constants';\n\nlet keyboardSettings;\n\nif (localStorage.getItem('keyboardSettings')) {\n  keyboardSettings = JSON.parse(localStorage.getItem('keyboardSettings'));\n}\nif (!localStorage.getItem('keyboardSettings')) {\n  keyboardSettings = {\n    capsMode: false,\n  };\n  localStorage.setItem('keyboardSettings', JSON.stringify(keyboardSettings));\n}\n\nconst { body } = document;\n\nconst output = document.createElement('textarea');\noutput.classList.add('output');\nbody.append(output);\n\nconst keyboard = document.createElement('div');\nkeyboard.classList.add('keyboard');\nbody.append(keyboard);\n\nconst info = document.createElement('p');\ninfo.classList.add('info');\ninfo.textContent = `\n  Клавиатура создана в операционной системе Windows.\n  Переключение языка не реализовано\n`;\nbody.append(info);\n\nconst shiftAndCapsMode = {};\n\nconst copyedFirstRowKeys = [...firstRowKeys];\nconst copyedSecondRowKeys = [...secondRowKeys];\nconst copyedThirdRowKeys = [...thirdRowKeys];\nconst copyedFourthRowKeys = [...fourthRowKeys];\nconst copyedFifthRowKeys = [...fifthRowKeys];\n\n/* First Row */\nconst keyboardFirstRow = createKeyboardRow();\nfirstRowKeys.forEach((key) => {\n  keyboardFirstRow.append(\n    renderKeyboardKey(key, copyedFirstRowKeys, firstRowKeysCodes, keyboardSettings, capsModeKeys),\n  );\n});\n/* ============================================== */\n\n/* Second Row */\nconst keyboardSecondRow = createKeyboardRow();\nsecondRowKeys.forEach((key) => {\n  keyboardSecondRow.append(\n    renderKeyboardKey(key, copyedSecondRowKeys, secondRowKeysCodes, keyboardSettings, capsModeKeys),\n  );\n});\n/* ============================================== */\n\n/* Third Row */\nconst keyboardThirdRow = createKeyboardRow();\nthirdRowKeys.forEach((key) => {\n  keyboardThirdRow.append(\n    renderKeyboardKey(key, copyedThirdRowKeys, thirdRowKeysCodes, keyboardSettings, capsModeKeys),\n  );\n});\n/* ============================================== */\n\n/* Fourth Row */\nconst keyboardFourthRow = createKeyboardRow();\nfourthRowKeys.forEach((key) => {\n  keyboardFourthRow.append(\n    renderKeyboardKey(key, copyedFourthRowKeys, fourthRowKeysCodes, keyboardSettings, capsModeKeys),\n  );\n});\n/* ============================================== */\n\n/* Fifth Row */\nconst keyboardFifthRow = createKeyboardRow();\nfifthRowKeys.forEach((key) => {\n  keyboardFifthRow.append(\n    renderKeyboardKey(key, copyedFifthRowKeys, fifthRowKeysCodes, keyboardSettings, capsModeKeys),\n  );\n});\n/* ============================================== */\n\nkeyboard.append(keyboardFirstRow);\nkeyboard.append(keyboardSecondRow);\nkeyboard.append(keyboardThirdRow);\nkeyboard.append(keyboardFourthRow);\nkeyboard.append(keyboardFifthRow);\n\ndocument.addEventListener('keydown', (e) => {\n  document.querySelector('.output').focus();\n\n  if (shiftModeKeys.some((keyCode) => keyCode === e.code)) {\n    e.preventDefault();\n    const key = document.querySelector(`[data-key=${e.code}]`);\n    output.setRangeText(`${key.textContent}`, output.selectionStart, output.selectionEnd, 'end');\n  }\n\n  if (e.key === 'Shift') {\n    shiftAndCapsMode[e.key] = true;\n    shiftModeKeys.forEach((keyCode, index) => {\n      const key = document.querySelector(`[data-key=${keyCode}]`);\n      key.textContent = shiftModeKeysActiveValues[index];\n    });\n    capsModeKeys.forEach((keyCode) => {\n      const key = document.querySelector(`[data-key=${keyCode}]`);\n      const currentText = key.textContent;\n      if (!keyboardSettings.capsMode) key.textContent = currentText.toLocaleUpperCase();\n      if (keyboardSettings.capsMode) key.textContent = currentText.toLocaleLowerCase();\n    });\n  }\n\n  if (e.code === 'CapsLock') {\n    if (!e.repeat) {\n      shiftAndCapsMode[e.key] = true;\n      keyboardSettings.capsMode = !keyboardSettings.capsMode;\n      localStorage.setItem('keyboardSettings', JSON.stringify(keyboardSettings));\n      document.querySelector(`[data-key=${e.code}]`).classList.toggle('power-on');\n      capsModeKeys.forEach((keyCode) => {\n        const key = document.querySelector(`[data-key=${keyCode}]`);\n        const currentText = key.textContent;\n        if (keyboardSettings.capsMode) key.textContent = currentText.toLocaleUpperCase();\n        if (!keyboardSettings.capsMode) key.textContent = currentText.toLocaleLowerCase();\n      });\n    }\n  }\n\n  if (shiftAndCapsMode.Shift && shiftAndCapsMode.CapsLock) {\n    capsModeKeys.forEach((keyCode) => {\n      const key = document.querySelector(`[data-key=${keyCode}]`);\n      const currentText = key.textContent;\n      if (!keyboardSettings.capsMode) key.textContent = currentText.toLocaleUpperCase();\n      if (keyboardSettings.capsMode) key.textContent = currentText.toLocaleLowerCase();\n    });\n  }\n\n  if (capsModeKeys.some((keyCode) => keyCode === e.code)) {\n    e.preventDefault();\n    const key = document.querySelector(`[data-key=${e.code}]`);\n    output.setRangeText(`${key.textContent}`, output.selectionStart, output.selectionEnd, 'end');\n  }\n\n  if (e.code === 'Tab') {\n    e.preventDefault();\n    output.setRangeText('    ', output.selectionStart, output.selectionEnd, 'end');\n  }\n\n  if (e.code === 'AltLeft' || e.code === 'AltRight') {\n    e.preventDefault();\n  }\n\n  const key = document.querySelector(`[data-key=${e.code}]`);\n  if (key) key.classList.add('active');\n});\n\ndocument.addEventListener('keyup', (e) => {\n  const keyboardKey = document.querySelector(`[data-key=${e.code}]`);\n  if (keyboardKey) keyboardKey.classList.remove('active');\n\n  if (e.key === 'CapsLock') {\n    shiftAndCapsMode[e.key] = false;\n  }\n\n  if (e.key === 'Shift') {\n    shiftAndCapsMode[e.key] = false;\n    shiftModeKeys.forEach((keyCode, index) => {\n      const key = document.querySelector(`[data-key=${keyCode}]`);\n      key.textContent = shiftModeKeysInactiveValues[index];\n    });\n    capsModeKeys.forEach((keyCode) => {\n      const key = document.querySelector(`[data-key=${keyCode}]`);\n      const currentText = key.textContent;\n      if (keyboardSettings.capsMode) key.textContent = currentText.toLocaleUpperCase();\n      if (!keyboardSettings.capsMode) key.textContent = currentText.toLocaleLowerCase();\n    });\n  }\n\n  if (shiftAndCapsMode.Shift) {\n    capsModeKeys.forEach((keyCode) => {\n      const key = document.querySelector(`[data-key=${keyCode}]`);\n      const currentText = key.textContent;\n      if (!keyboardSettings.capsMode) key.textContent = currentText.toLocaleUpperCase();\n      if (keyboardSettings.capsMode) key.textContent = currentText.toLocaleLowerCase();\n    });\n  }\n\n  if (!shiftAndCapsMode.Shift) {\n    capsModeKeys.forEach((keyCode) => {\n      const key = document.querySelector(`[data-key=${keyCode}]`);\n      const currentText = key.textContent;\n      if (keyboardSettings.capsMode) key.textContent = currentText.toLocaleUpperCase();\n      if (!keyboardSettings.capsMode) key.textContent = currentText.toLocaleLowerCase();\n    });\n  }\n});\n"],"names":[],"sourceRoot":""}